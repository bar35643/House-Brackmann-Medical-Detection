name: CI-Integration

on: # https://help.github.com/en/actions/reference/events-that-trigger-workflows
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
# schedule:
#   - cron: '0 0 * * *'  # Runs at 00:00 UTC every day

jobs:
  linter:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: ["3.7", "3.8", "3.9"]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Note: This uses an internal pip API and may not always work
      # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
      - name: Get pip cache
        id: pip-cache
        run: |
          python -c "from pip._internal.locations import USER_CACHE_DIR; print('::set-output name=dir::' + USER_CACHE_DIR)"
      - name: Cache pip
        uses: actions/cache@v2.1.7
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-
            
      - name: Install dependencies
        run: |
           python -m pip install --upgrade pip
           pip install -qr ./source/hbmedicalprocessing/requirements.txt
           python --version
           pip --version
           pip list
         
      - name: Analysing the code with pylint
        run: |
          pylint $(git ls-files '*.py') --extension-pkg-whitelist=torch --generated-members=numpy,torch --max-line-length=180 --max-attributes=10 --max-args=10 --max-locals=20 --fail-under 8.5
          
  build:
    needs: linter
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v2
        - name: Build Python Package
          run: |
            python -m pip install --upgrade build && pip install --upgrade pip
            python -m build
          
  create_docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v2
        - name: Build the Docker image
          run: docker build . --file Dockerfile --tag hbmedicalprocessing:$(date +%s)
          
